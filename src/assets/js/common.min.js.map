{"version":3,"sources":["webpack:///common.min.js","webpack:///webpack/bootstrap 10cde749f38c4b5186f9","webpack:///./front-end/app/assets/js/common.js","webpack:///./~/fg-loadcss/src/loadCSS.js","webpack:///./front-end/app/assets/js/lib/modernizr.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","parentJsonpFunction","window","chunkIds","moreModules","chunkId","i","callbacks","length","installedChunks","push","apply","Object","prototype","hasOwnProperty","shift","0","e","callback","undefined","head","document","getElementsByTagName","script","createElement","type","charset","async","src","p","1","appendChild","m","c","loadCSS","global","w","href","before","media","ready","cb","doc","body","setTimeout","loadCB","ss","addEventListener","removeEventListener","ref","refs","childNodes","sheets","styleSheets","rel","parentNode","insertBefore","nextSibling","onloadcssdefined","resolvedHref","this","is","obj","testRunner","featureNames","feature","aliasIdx","result","nameIdx","featureName","featureNameSplit","featureIdx","tests","name","toLowerCase","options","aliases","fn","split","Modernizr","Boolean","classes","join","setClasses","className","docElement","classPrefix","_config","isSVG","baseVal","enableJSClass","reJS","RegExp","replace","enableClasses","contains","str","substr","indexOf","arguments","createElementNS","getBody","fake","injectElementWithStyles","rule","nodes","testnames","style","ret","node","docOverflow","mod","div","parseInt","styleSheet","cssText","createTextNode","background","overflow","removeChild","offsetHeight","domToCSS","m1","computedStyle","elem","pseudo","prop","getComputedStyle","console","getPropertyValue","method","error","currentStyle","nativeTestProps","props","value","CSS","supports","conditionText","cssToDOM","m2","toUpperCase","testProps","prefixed","skipValueTest","cleanElems","afterInit","mStyle","modElem","propsLength","elems","fnBind","that","testDOMProps","item","testPropsAll","ucProp","charAt","slice","cssomPrefixes","testAllProps","ModernizrProto","_version","usePrefixes","_q","on","test","self","addTest","addAsyncTest","documentElement","nodeName","omPrefixes","_cssomPrefixes","unshift","domPrefixes","_domPrefixes"],"mappings":"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","file":"common.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// install a JSONP callback for chunk loading\n/******/ \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n/******/ \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules) {\n/******/ \t\t// add \"moreModules\" to the modules object,\n/******/ \t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\tvar moduleId, chunkId, i = 0, callbacks = [];\n/******/ \t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\tchunkId = chunkIds[i];\n/******/ \t\t\tif(installedChunks[chunkId])\n/******/ \t\t\t\tcallbacks.push.apply(callbacks, installedChunks[chunkId]);\n/******/ \t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t}\n/******/ \t\tfor(moduleId in moreModules) {\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n/******/ \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);\n/******/ \t\twhile(callbacks.length)\n/******/ \t\t\tcallbacks.shift().call(null, __webpack_require__);\n/******/ \t\tif(moreModules[0]) {\n/******/ \t\t\tinstalledModules[0] = 0;\n/******/ \t\t\treturn __webpack_require__(0);\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// object to store loaded and loading chunks\n/******/ \t// \"0\" means \"already loaded\"\n/******/ \t// Array means \"loading\", array contains callbacks\n/******/ \tvar installedChunks = {\n/******/ \t\t0:0\n/******/ \t};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/ \t// This file contains only the entry chunk.\n/******/ \t// The chunk loading function for additional chunks\n/******/ \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n/******/ \t\t// \"0\" is the signal for \"already loaded\"\n/******/ \t\tif(installedChunks[chunkId] === 0)\n/******/ \t\t\treturn callback.call(null, __webpack_require__);\n/******/\n/******/ \t\t// an array means \"currently loading\".\n/******/ \t\tif(installedChunks[chunkId] !== undefined) {\n/******/ \t\t\tinstalledChunks[chunkId].push(callback);\n/******/ \t\t} else {\n/******/ \t\t\t// start chunk loading\n/******/ \t\t\tinstalledChunks[chunkId] = [callback];\n/******/ \t\t\tvar head = document.getElementsByTagName('head')[0];\n/******/ \t\t\tvar script = document.createElement('script');\n/******/ \t\t\tscript.type = 'text/javascript';\n/******/ \t\t\tscript.charset = 'utf-8';\n/******/ \t\t\tscript.async = true;\n/******/\n/******/ \t\t\tscript.src = __webpack_require__.p + \"\" + ({\"1\":\"scripts\"}[chunkId]||chunkId) + \"-\" + {\"1\":\"d055c6ed17cb480e3cab\"}[chunkId] + \".min.js\";\n/******/ \t\t\thead.appendChild(script);\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"assets/js/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Common modules\n\t */\n\t\n\t// Shim Promise, <picture> support\n\t// require('picturefill/src/picturefill');\n\t\n\t// Async CSS loader\n\twindow.loadCSS = __webpack_require__(2).loadCSS;\n\t\n\t// Add Modernizr\n\t__webpack_require__(3);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*! loadCSS. [c]2017 Filament Group, Inc. MIT License */\n\t(function(w){\n\t\t\"use strict\";\n\t\t/* exported loadCSS */\n\t\tvar loadCSS = function( href, before, media ){\n\t\t\t// Arguments explained:\n\t\t\t// `href` [REQUIRED] is the URL for your CSS file.\n\t\t\t// `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n\t\t\t\t// By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n\t\t\t// `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n\t\t\tvar doc = w.document;\n\t\t\tvar ss = doc.createElement( \"link\" );\n\t\t\tvar ref;\n\t\t\tif( before ){\n\t\t\t\tref = before;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar refs = ( doc.body || doc.getElementsByTagName( \"head\" )[ 0 ] ).childNodes;\n\t\t\t\tref = refs[ refs.length - 1];\n\t\t\t}\n\t\n\t\t\tvar sheets = doc.styleSheets;\n\t\t\tss.rel = \"stylesheet\";\n\t\t\tss.href = href;\n\t\t\t// temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\t\t\tss.media = \"only x\";\n\t\n\t\t\t// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\t\t\tfunction ready( cb ){\n\t\t\t\tif( doc.body ){\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tready( cb );\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Inject link\n\t\t\t\t// Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n\t\t\t\t// Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\t\t\tready( function(){\n\t\t\t\tref.parentNode.insertBefore( ss, ( before ? ref : ref.nextSibling ) );\n\t\t\t});\n\t\t\t// A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n\t\t\tvar onloadcssdefined = function( cb ){\n\t\t\t\tvar resolvedHref = ss.href;\n\t\t\t\tvar i = sheets.length;\n\t\t\t\twhile( i-- ){\n\t\t\t\t\tif( sheets[ i ].href === resolvedHref ){\n\t\t\t\t\t\treturn cb();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tonloadcssdefined( cb );\n\t\t\t\t});\n\t\t\t};\n\t\n\t\t\tfunction loadCB(){\n\t\t\t\tif( ss.addEventListener ){\n\t\t\t\t\tss.removeEventListener( \"load\", loadCB );\n\t\t\t\t}\n\t\t\t\tss.media = media || \"all\";\n\t\t\t}\n\t\n\t\t\t// once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\t\t\tif( ss.addEventListener ){\n\t\t\t\tss.addEventListener( \"load\", loadCB);\n\t\t\t}\n\t\t\tss.onloadcssdefined = onloadcssdefined;\n\t\t\tonloadcssdefined( loadCB );\n\t\t\treturn ss;\n\t\t};\n\t\t// commonjs\n\t\tif( true ){\n\t\t\texports.loadCSS = loadCSS;\n\t\t}\n\t\telse {\n\t\t\tw.loadCSS = loadCSS;\n\t\t}\n\t}( typeof global !== \"undefined\" ? global : this ));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t/* eslint-disable */\n\t/*!\n\t * modernizr v3.5.0\n\t * Build https://modernizr.com/download?-flexbox-setclasses-dontmin\n\t *\n\t * Copyright (c)\n\t *  Faruk Ates\n\t *  Paul Irish\n\t *  Alex Sexton\n\t *  Ryan Seddon\n\t *  Patrick Kettner\n\t *  Stu Cox\n\t *  Richard Herrera\n\t\n\t * MIT License\n\t */\n\t\n\t/*\n\t * Modernizr tests which native CSS3 and HTML5 features are available in the\n\t * current UA and makes the results available to you in two ways: as properties on\n\t * a global `Modernizr` object, and as classes on the `<html>` element. This\n\t * information allows you to progressively enhance your pages with a granular level\n\t * of control over the experience.\n\t*/\n\t\n\t;(function(window, document, undefined){\n\t  var tests = [];\n\t  \n\t\n\t  /**\n\t   *\n\t   * ModernizrProto is the constructor for Modernizr\n\t   *\n\t   * @class\n\t   * @access public\n\t   */\n\t\n\t  var ModernizrProto = {\n\t    // The current version, dummy\n\t    _version: '3.5.0',\n\t\n\t    // Any settings that don't work as separate modules\n\t    // can go in here as configuration.\n\t    _config: {\n\t      'classPrefix': '',\n\t      'enableClasses': true,\n\t      'enableJSClass': true,\n\t      'usePrefixes': true\n\t    },\n\t\n\t    // Queue of tests\n\t    _q: [],\n\t\n\t    // Stub these for people who are listening\n\t    on: function(test, cb) {\n\t      // I don't really think people should do this, but we can\n\t      // safe guard it a bit.\n\t      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n\t      // This is in case people listen to synchronous tests. I would leave it out,\n\t      // but the code to *disallow* sync tests in the real version of this\n\t      // function is actually larger than this.\n\t      var self = this;\n\t      setTimeout(function() {\n\t        cb(self[test]);\n\t      }, 0);\n\t    },\n\t\n\t    addTest: function(name, fn, options) {\n\t      tests.push({name: name, fn: fn, options: options});\n\t    },\n\t\n\t    addAsyncTest: function(fn) {\n\t      tests.push({name: null, fn: fn});\n\t    }\n\t  };\n\t\n\t  \n\t\n\t  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n\t  var Modernizr = function() {};\n\t  Modernizr.prototype = ModernizrProto;\n\t\n\t  // Leak modernizr globally when you `require` it rather than force it here.\n\t  // Overwrite name so constructor name is nicer :D\n\t  Modernizr = new Modernizr();\n\t\n\t  \n\t\n\t  var classes = [];\n\t  \n\t\n\t  /**\n\t   * is returns a boolean if the typeof an obj is exactly type.\n\t   *\n\t   * @access private\n\t   * @function is\n\t   * @param {*} obj - A thing we want to check the type of\n\t   * @param {string} type - A string to compare the typeof against\n\t   * @returns {boolean}\n\t   */\n\t\n\t  function is(obj, type) {\n\t    return typeof obj === type;\n\t  }\n\t  ;\n\t\n\t  /**\n\t   * Run through all tests and detect their support in the current UA.\n\t   *\n\t   * @access private\n\t   */\n\t\n\t  function testRunner() {\n\t    var featureNames;\n\t    var feature;\n\t    var aliasIdx;\n\t    var result;\n\t    var nameIdx;\n\t    var featureName;\n\t    var featureNameSplit;\n\t\n\t    for (var featureIdx in tests) {\n\t      if (tests.hasOwnProperty(featureIdx)) {\n\t        featureNames = [];\n\t        feature = tests[featureIdx];\n\t        // run the test, throw the return value into the Modernizr,\n\t        // then based on that boolean, define an appropriate className\n\t        // and push it into an array of classes we'll join later.\n\t        //\n\t        // If there is no name, it's an 'async' test that is run,\n\t        // but not directly added to the object. That should\n\t        // be done with a post-run addTest call.\n\t        if (feature.name) {\n\t          featureNames.push(feature.name.toLowerCase());\n\t\n\t          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n\t            // Add all the aliases into the names list\n\t            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n\t              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n\t            }\n\t          }\n\t        }\n\t\n\t        // Run the test, or use the raw value if it's not a function\n\t        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\t\n\t\n\t        // Set each of the names on the Modernizr object\n\t        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n\t          featureName = featureNames[nameIdx];\n\t          // Support dot properties as sub tests. We don't do checking to make sure\n\t          // that the implied parent tests have been added. You must call them in\n\t          // order (either in the test, or make the parent test a dependency).\n\t          //\n\t          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n\t          // hashtag famous last words\n\t          featureNameSplit = featureName.split('.');\n\t\n\t          if (featureNameSplit.length === 1) {\n\t            Modernizr[featureNameSplit[0]] = result;\n\t          } else {\n\t            // cast to a Boolean, if not one already\n\t            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n\t              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n\t            }\n\t\n\t            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n\t          }\n\t\n\t          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n\t        }\n\t      }\n\t    }\n\t  }\n\t  ;\n\t\n\t  /**\n\t   * docElement is a convenience wrapper to grab the root element of the document\n\t   *\n\t   * @access private\n\t   * @returns {HTMLElement|SVGElement} The root element of the document\n\t   */\n\t\n\t  var docElement = document.documentElement;\n\t  \n\t\n\t  /**\n\t   * A convenience helper to check if the document we are running in is an SVG document\n\t   *\n\t   * @access private\n\t   * @returns {boolean}\n\t   */\n\t\n\t  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n\t  \n\t\n\t  /**\n\t   * setClasses takes an array of class names and adds them to the root element\n\t   *\n\t   * @access private\n\t   * @function setClasses\n\t   * @param {string[]} classes - Array of class names\n\t   */\n\t\n\t  // Pass in an and array of class names, e.g.:\n\t  //  ['no-webp', 'borderradius', ...]\n\t  function setClasses(classes) {\n\t    var className = docElement.className;\n\t    var classPrefix = Modernizr._config.classPrefix || '';\n\t\n\t    if (isSVG) {\n\t      className = className.baseVal;\n\t    }\n\t\n\t    // Change `no-js` to `js` (independently of the `enableClasses` option)\n\t    // Handle classPrefix on this too\n\t    if (Modernizr._config.enableJSClass) {\n\t      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n\t      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n\t    }\n\t\n\t    if (Modernizr._config.enableClasses) {\n\t      // Add the new classes\n\t      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n\t      if (isSVG) {\n\t        docElement.className.baseVal = className;\n\t      } else {\n\t        docElement.className = className;\n\t      }\n\t    }\n\t\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * If the browsers follow the spec, then they would expose vendor-specific styles as:\n\t   *   elem.style.WebkitBorderRadius\n\t   * instead of something like the following (which is technically incorrect):\n\t   *   elem.style.webkitBorderRadius\n\t\n\t   * WebKit ghosts their properties in lowercase but Opera & Moz do not.\n\t   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n\t   *   erik.eae.net/archives/2008/03/10/21.48.10/\n\t\n\t   * More here: github.com/Modernizr/Modernizr/issues/issue/21\n\t   *\n\t   * @access private\n\t   * @returns {string} The string representing the vendor-specific style properties\n\t   */\n\t\n\t  var omPrefixes = 'Moz O ms Webkit';\n\t  \n\t\n\t  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n\t  ModernizrProto._cssomPrefixes = cssomPrefixes;\n\t  \n\t\n\t\n\t  /**\n\t   * contains checks to see if a string contains another string\n\t   *\n\t   * @access private\n\t   * @function contains\n\t   * @param {string} str - The string we want to check for substrings\n\t   * @param {string} substr - The substring we want to search the first string for\n\t   * @returns {boolean}\n\t   */\n\t\n\t  function contains(str, substr) {\n\t    return !!~('' + str).indexOf(substr);\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * createElement is a convenience wrapper around document.createElement. Since we\n\t   * use createElement all over the place, this allows for (slightly) smaller code\n\t   * as well as abstracting away issues with creating elements in contexts other than\n\t   * HTML documents (e.g. SVG documents).\n\t   *\n\t   * @access private\n\t   * @function createElement\n\t   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n\t   */\n\t\n\t  function createElement() {\n\t    if (typeof document.createElement !== 'function') {\n\t      // This is the case in IE7, where the type of createElement is \"object\".\n\t      // For this reason, we cannot call apply() as Object is not a Function.\n\t      return document.createElement(arguments[0]);\n\t    } else if (isSVG) {\n\t      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n\t    } else {\n\t      return document.createElement.apply(document, arguments);\n\t    }\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * Create our \"modernizr\" element that we do most feature tests on.\n\t   *\n\t   * @access private\n\t   */\n\t\n\t  var modElem = {\n\t    elem: createElement('modernizr')\n\t  };\n\t\n\t  // Clean up this element\n\t  Modernizr._q.push(function() {\n\t    delete modElem.elem;\n\t  });\n\t\n\t  \n\t\n\t  var mStyle = {\n\t    style: modElem.elem.style\n\t  };\n\t\n\t  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n\t  // the front of the queue.\n\t  Modernizr._q.unshift(function() {\n\t    delete mStyle.style;\n\t  });\n\t\n\t  \n\t\n\t  /**\n\t   * getBody returns the body of a document, or an element that can stand in for\n\t   * the body if a real body does not exist\n\t   *\n\t   * @access private\n\t   * @function getBody\n\t   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n\t   * artificially created element that stands in for the body\n\t   */\n\t\n\t  function getBody() {\n\t    // After page load injecting a fake body doesn't work so check if body exists\n\t    var body = document.body;\n\t\n\t    if (!body) {\n\t      // Can't use the real body create a fake one.\n\t      body = createElement(isSVG ? 'svg' : 'body');\n\t      body.fake = true;\n\t    }\n\t\n\t    return body;\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * injectElementWithStyles injects an element with style element and some CSS rules\n\t   *\n\t   * @access private\n\t   * @function injectElementWithStyles\n\t   * @param {string} rule - String representing a css rule\n\t   * @param {function} callback - A function that is used to test the injected element\n\t   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n\t   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n\t   * @returns {boolean}\n\t   */\n\t\n\t  function injectElementWithStyles(rule, callback, nodes, testnames) {\n\t    var mod = 'modernizr';\n\t    var style;\n\t    var ret;\n\t    var node;\n\t    var docOverflow;\n\t    var div = createElement('div');\n\t    var body = getBody();\n\t\n\t    if (parseInt(nodes, 10)) {\n\t      // In order not to give false positives we create a node for each test\n\t      // This also allows the method to scale for unspecified uses\n\t      while (nodes--) {\n\t        node = createElement('div');\n\t        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n\t        div.appendChild(node);\n\t      }\n\t    }\n\t\n\t    style = createElement('style');\n\t    style.type = 'text/css';\n\t    style.id = 's' + mod;\n\t\n\t    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n\t    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n\t    (!body.fake ? div : body).appendChild(style);\n\t    body.appendChild(div);\n\t\n\t    if (style.styleSheet) {\n\t      style.styleSheet.cssText = rule;\n\t    } else {\n\t      style.appendChild(document.createTextNode(rule));\n\t    }\n\t    div.id = mod;\n\t\n\t    if (body.fake) {\n\t      //avoid crashing IE8, if background image is used\n\t      body.style.background = '';\n\t      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n\t      body.style.overflow = 'hidden';\n\t      docOverflow = docElement.style.overflow;\n\t      docElement.style.overflow = 'hidden';\n\t      docElement.appendChild(body);\n\t    }\n\t\n\t    ret = callback(div, rule);\n\t    // If this is done after page load we don't want to remove the body so check if body exists\n\t    if (body.fake) {\n\t      body.parentNode.removeChild(body);\n\t      docElement.style.overflow = docOverflow;\n\t      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n\t      // eslint-disable-next-line\n\t      docElement.offsetHeight;\n\t    } else {\n\t      div.parentNode.removeChild(div);\n\t    }\n\t\n\t    return !!ret;\n\t\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * domToCSS takes a camelCase string and converts it to kebab-case\n\t   * e.g. boxSizing -> box-sizing\n\t   *\n\t   * @access private\n\t   * @function domToCSS\n\t   * @param {string} name - String name of camelCase prop we want to convert\n\t   * @returns {string} The kebab-case version of the supplied name\n\t   */\n\t\n\t  function domToCSS(name) {\n\t    return name.replace(/([A-Z])/g, function(str, m1) {\n\t      return '-' + m1.toLowerCase();\n\t    }).replace(/^ms-/, '-ms-');\n\t  }\n\t  ;\n\t\n\t\n\t  /**\n\t   * wrapper around getComputedStyle, to fix issues with Firefox returning null when\n\t   * called inside of a hidden iframe\n\t   *\n\t   * @access private\n\t   * @function computedStyle\n\t   * @param {HTMLElement|SVGElement} - The element we want to find the computed styles of\n\t   * @param {string|null} [pseudoSelector]- An optional pseudo element selector (e.g. :before), of null if none\n\t   * @returns {CSSStyleDeclaration}\n\t   */\n\t\n\t  function computedStyle(elem, pseudo, prop) {\n\t    var result;\n\t\n\t    if ('getComputedStyle' in window) {\n\t      result = getComputedStyle.call(window, elem, pseudo);\n\t      var console = window.console;\n\t\n\t      if (result !== null) {\n\t        if (prop) {\n\t          result = result.getPropertyValue(prop);\n\t        }\n\t      } else {\n\t        if (console) {\n\t          var method = console.error ? 'error' : 'log';\n\t          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\n\t        }\n\t      }\n\t    } else {\n\t      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\n\t    }\n\t\n\t    return result;\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * nativeTestProps allows for us to use native feature detection functionality if available.\n\t   * some prefixed form, or false, in the case of an unsupported rule\n\t   *\n\t   * @access private\n\t   * @function nativeTestProps\n\t   * @param {array} props - An array of property names\n\t   * @param {string} value - A string representing the value we want to check via @supports\n\t   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n\t   */\n\t\n\t  // Accepts a list of property names and a single value\n\t  // Returns `undefined` if native detection not available\n\t  function nativeTestProps(props, value) {\n\t    var i = props.length;\n\t    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n\t    if ('CSS' in window && 'supports' in window.CSS) {\n\t      // Try every prefixed variant of the property\n\t      while (i--) {\n\t        if (window.CSS.supports(domToCSS(props[i]), value)) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    }\n\t    // Otherwise fall back to at-rule (for Opera 12.x)\n\t    else if ('CSSSupportsRule' in window) {\n\t      // Build a condition string for every prefixed variant\n\t      var conditionText = [];\n\t      while (i--) {\n\t        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n\t      }\n\t      conditionText = conditionText.join(' or ');\n\t      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\n\t        return computedStyle(node, null, 'position') == 'absolute';\n\t      });\n\t    }\n\t    return undefined;\n\t  }\n\t  ;\n\t\n\t  /**\n\t   * cssToDOM takes a kebab-case string and converts it to camelCase\n\t   * e.g. box-sizing -> boxSizing\n\t   *\n\t   * @access private\n\t   * @function cssToDOM\n\t   * @param {string} name - String name of kebab-case prop we want to convert\n\t   * @returns {string} The camelCase version of the supplied name\n\t   */\n\t\n\t  function cssToDOM(name) {\n\t    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n\t      return m1 + m2.toUpperCase();\n\t    }).replace(/^-/, '');\n\t  }\n\t  ;\n\t\n\t  // testProps is a generic CSS / DOM property test.\n\t\n\t  // In testing support for a given CSS property, it's legit to test:\n\t  //    `elem.style[styleName] !== undefined`\n\t  // If the property is supported it will return an empty string,\n\t  // if unsupported it will return undefined.\n\t\n\t  // We'll take advantage of this quick test and skip setting a style\n\t  // on our modernizr element, but instead just testing undefined vs\n\t  // empty string.\n\t\n\t  // Property names can be provided in either camelCase or kebab-case.\n\t\n\t  function testProps(props, prefixed, value, skipValueTest) {\n\t    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\t\n\t    // Try native detect first\n\t    if (!is(value, 'undefined')) {\n\t      var result = nativeTestProps(props, value);\n\t      if (!is(result, 'undefined')) {\n\t        return result;\n\t      }\n\t    }\n\t\n\t    // Otherwise do it properly\n\t    var afterInit, i, propsLength, prop, before;\n\t\n\t    // If we don't have a style element, that means we're running async or after\n\t    // the core tests, so we'll need to create our own elements to use\n\t\n\t    // inside of an SVG element, in certain browsers, the `style` element is only\n\t    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n\t    // fall back to a less used element and hope for the best.\n\t    // for strict XHTML browsers the hardly used samp element is used\n\t    var elems = ['modernizr', 'tspan', 'samp'];\n\t    while (!mStyle.style && elems.length) {\n\t      afterInit = true;\n\t      mStyle.modElem = createElement(elems.shift());\n\t      mStyle.style = mStyle.modElem.style;\n\t    }\n\t\n\t    // Delete the objects if we created them.\n\t    function cleanElems() {\n\t      if (afterInit) {\n\t        delete mStyle.style;\n\t        delete mStyle.modElem;\n\t      }\n\t    }\n\t\n\t    propsLength = props.length;\n\t    for (i = 0; i < propsLength; i++) {\n\t      prop = props[i];\n\t      before = mStyle.style[prop];\n\t\n\t      if (contains(prop, '-')) {\n\t        prop = cssToDOM(prop);\n\t      }\n\t\n\t      if (mStyle.style[prop] !== undefined) {\n\t\n\t        // If value to test has been passed in, do a set-and-check test.\n\t        // 0 (integer) is a valid property value, so check that `value` isn't\n\t        // undefined, rather than just checking it's truthy.\n\t        if (!skipValueTest && !is(value, 'undefined')) {\n\t\n\t          // Needs a try catch block because of old IE. This is slow, but will\n\t          // be avoided in most cases because `skipValueTest` will be used.\n\t          try {\n\t            mStyle.style[prop] = value;\n\t          } catch (e) {}\n\t\n\t          // If the property value has changed, we assume the value used is\n\t          // supported. If `value` is empty string, it'll fail here (because\n\t          // it hasn't changed), which matches how browsers have implemented\n\t          // CSS.supports()\n\t          if (mStyle.style[prop] != before) {\n\t            cleanElems();\n\t            return prefixed == 'pfx' ? prop : true;\n\t          }\n\t        }\n\t        // Otherwise just return true, or the property name if this is a\n\t        // `prefixed()` call\n\t        else {\n\t          cleanElems();\n\t          return prefixed == 'pfx' ? prop : true;\n\t        }\n\t      }\n\t    }\n\t    cleanElems();\n\t    return false;\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * List of JavaScript DOM values used for tests\n\t   *\n\t   * @memberof Modernizr\n\t   * @name Modernizr._domPrefixes\n\t   * @optionName Modernizr._domPrefixes\n\t   * @optionProp domPrefixes\n\t   * @access public\n\t   * @example\n\t   *\n\t   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n\t   * than kebab-case properties, all properties are their Capitalized variant\n\t   *\n\t   * ```js\n\t   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n\t   * ```\n\t   */\n\t\n\t  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n\t  ModernizrProto._domPrefixes = domPrefixes;\n\t  \n\t\n\t  /**\n\t   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\n\t   *\n\t   * @access private\n\t   * @function fnBind\n\t   * @param {function} fn - a function you want to change `this` reference to\n\t   * @param {object} that - the `this` you want to call the function with\n\t   * @returns {function} The wrapped version of the supplied function\n\t   */\n\t\n\t  function fnBind(fn, that) {\n\t    return function() {\n\t      return fn.apply(that, arguments);\n\t    };\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * testDOMProps is a generic DOM property test; if a browser supports\n\t   *   a certain property, it won't return undefined for it.\n\t   *\n\t   * @access private\n\t   * @function testDOMProps\n\t   * @param {array.<string>} props - An array of properties to test for\n\t   * @param {object} obj - An object or Element you want to use to test the parameters again\n\t   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\n\t   * @returns {false|*} returns false if the prop is unsupported, otherwise the value that is supported\n\t   */\n\t  function testDOMProps(props, obj, elem) {\n\t    var item;\n\t\n\t    for (var i in props) {\n\t      if (props[i] in obj) {\n\t\n\t        // return the property name as a string\n\t        if (elem === false) {\n\t          return props[i];\n\t        }\n\t\n\t        item = obj[props[i]];\n\t\n\t        // let's bind a function\n\t        if (is(item, 'function')) {\n\t          // bind to obj unless overriden\n\t          return fnBind(item, elem || obj);\n\t        }\n\t\n\t        // return the unbound function or obj or value\n\t        return item;\n\t      }\n\t    }\n\t    return false;\n\t  }\n\t\n\t  ;\n\t\n\t  /**\n\t   * testPropsAll tests a list of DOM properties we want to check against.\n\t   * We specify literally ALL possible (known and/or likely) properties on\n\t   * the element including the non-vendor prefixed one, for forward-\n\t   * compatibility.\n\t   *\n\t   * @access private\n\t   * @function testPropsAll\n\t   * @param {string} prop - A string of the property to test for\n\t   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\n\t   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\n\t   * @param {string} [value] - A string of a css value\n\t   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\n\t   * @returns {false|string} returns the string version of the property, or false if it is unsupported\n\t   */\n\t  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\n\t\n\t    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n\t      props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\t\n\t    // did they call .prefixed('boxSizing') or are we just testing a prop?\n\t    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\n\t      return testProps(props, prefixed, value, skipValueTest);\n\t\n\t      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n\t    } else {\n\t      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n\t      return testDOMProps(props, prefixed, elem);\n\t    }\n\t  }\n\t\n\t  // Modernizr.testAllProps() investigates whether a given style property,\n\t  // or any of its vendor-prefixed variants, is recognized\n\t  //\n\t  // Note that the property names must be provided in the camelCase variant.\n\t  // Modernizr.testAllProps('boxSizing')\n\t  ModernizrProto.testAllProps = testPropsAll;\n\t\n\t  \n\t\n\t  /**\n\t   * testAllProps determines whether a given CSS property is supported in the browser\n\t   *\n\t   * @memberof Modernizr\n\t   * @name Modernizr.testAllProps\n\t   * @optionName Modernizr.testAllProps()\n\t   * @optionProp testAllProps\n\t   * @access public\n\t   * @function testAllProps\n\t   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\n\t   * @param {string} [value] - String of the value to test\n\t   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\n\t   * @example\n\t   *\n\t   * testAllProps determines whether a given CSS property, in some prefixed form,\n\t   * is supported by the browser.\n\t   *\n\t   * ```js\n\t   * testAllProps('boxSizing')  // true\n\t   * ```\n\t   *\n\t   * It can optionally be given a CSS value in string form to test if a property\n\t   * value is valid\n\t   *\n\t   * ```js\n\t   * testAllProps('display', 'block') // true\n\t   * testAllProps('display', 'penguin') // false\n\t   * ```\n\t   *\n\t   * A boolean can be passed as a third parameter to skip the value check when\n\t   * native detection (@supports) isn't available.\n\t   *\n\t   * ```js\n\t   * testAllProps('shapeOutside', 'content-box', true);\n\t   * ```\n\t   */\n\t\n\t  function testAllProps(prop, value, skipValueTest) {\n\t    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n\t  }\n\t  ModernizrProto.testAllProps = testAllProps;\n\t  \n\t/*!\n\t{\n\t  \"name\": \"Flexbox\",\n\t  \"property\": \"flexbox\",\n\t  \"caniuse\": \"flexbox\",\n\t  \"tags\": [\"css\"],\n\t  \"notes\": [{\n\t    \"name\": \"The _new_ flexbox\",\n\t    \"href\": \"http://dev.w3.org/csswg/css3-flexbox\"\n\t  }],\n\t  \"warnings\": [\n\t    \"A `true` result for this detect does not imply that the `flex-wrap` property is supported; see the `flexwrap` detect.\"\n\t  ]\n\t}\n\t!*/\n\t/* DOC\n\tDetects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.\n\t*/\n\t\n\t  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));\n\t\n\t\n\t  // Run each test\n\t  testRunner();\n\t\n\t  // Remove the \"no-js\" class if it exists\n\t  setClasses(classes);\n\t\n\t  delete ModernizrProto.addTest;\n\t  delete ModernizrProto.addAsyncTest;\n\t\n\t  // Run the things that are supposed to run after the tests\n\t  for (var i = 0; i < Modernizr._q.length; i++) {\n\t    Modernizr._q[i]();\n\t  }\n\t\n\t  // Leak Modernizr namespace\n\t  window.Modernizr = Modernizr;\n\t\n\t\n\t;\n\t\n\t})(window, document);\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// common.min.js"," \t// install a JSONP callback for chunk loading\n \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules) {\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, callbacks = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId])\n \t\t\t\tcallbacks.push.apply(callbacks, installedChunks[chunkId]);\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);\n \t\twhile(callbacks.length)\n \t\t\tcallbacks.shift().call(null, __webpack_require__);\n \t\tif(moreModules[0]) {\n \t\t\tinstalledModules[0] = 0;\n \t\t\treturn __webpack_require__(0);\n \t\t}\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// \"0\" means \"already loaded\"\n \t// Array means \"loading\", array contains callbacks\n \tvar installedChunks = {\n \t\t0:0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] === 0)\n \t\t\treturn callback.call(null, __webpack_require__);\n\n \t\t// an array means \"currently loading\".\n \t\tif(installedChunks[chunkId] !== undefined) {\n \t\t\tinstalledChunks[chunkId].push(callback);\n \t\t} else {\n \t\t\t// start chunk loading\n \t\t\tinstalledChunks[chunkId] = [callback];\n \t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\tvar script = document.createElement('script');\n \t\t\tscript.type = 'text/javascript';\n \t\t\tscript.charset = 'utf-8';\n \t\t\tscript.async = true;\n\n \t\t\tscript.src = __webpack_require__.p + \"\" + ({\"1\":\"scripts\"}[chunkId]||chunkId) + \"-\" + {\"1\":\"d055c6ed17cb480e3cab\"}[chunkId] + \".min.js\";\n \t\t\thead.appendChild(script);\n \t\t}\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"assets/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 10cde749f38c4b5186f9","/**\n * Common modules\n */\n\n// Shim Promise, <picture> support\n// require('picturefill/src/picturefill');\n\n// Async CSS loader\nwindow.loadCSS = require('fg-loadcss').loadCSS;\n\n// Add Modernizr\nrequire('./lib/modernizr');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./front-end/app/assets/js/common.js\n// module id = 1\n// module chunks = 0","/*! loadCSS. [c]2017 Filament Group, Inc. MIT License */\n(function(w){\n\t\"use strict\";\n\t/* exported loadCSS */\n\tvar loadCSS = function( href, before, media ){\n\t\t// Arguments explained:\n\t\t// `href` [REQUIRED] is the URL for your CSS file.\n\t\t// `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n\t\t\t// By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n\t\t// `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n\t\tvar doc = w.document;\n\t\tvar ss = doc.createElement( \"link\" );\n\t\tvar ref;\n\t\tif( before ){\n\t\t\tref = before;\n\t\t}\n\t\telse {\n\t\t\tvar refs = ( doc.body || doc.getElementsByTagName( \"head\" )[ 0 ] ).childNodes;\n\t\t\tref = refs[ refs.length - 1];\n\t\t}\n\n\t\tvar sheets = doc.styleSheets;\n\t\tss.rel = \"stylesheet\";\n\t\tss.href = href;\n\t\t// temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\t\tss.media = \"only x\";\n\n\t\t// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\t\tfunction ready( cb ){\n\t\t\tif( doc.body ){\n\t\t\t\treturn cb();\n\t\t\t}\n\t\t\tsetTimeout(function(){\n\t\t\t\tready( cb );\n\t\t\t});\n\t\t}\n\t\t// Inject link\n\t\t\t// Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n\t\t\t// Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\t\tready( function(){\n\t\t\tref.parentNode.insertBefore( ss, ( before ? ref : ref.nextSibling ) );\n\t\t});\n\t\t// A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n\t\tvar onloadcssdefined = function( cb ){\n\t\t\tvar resolvedHref = ss.href;\n\t\t\tvar i = sheets.length;\n\t\t\twhile( i-- ){\n\t\t\t\tif( sheets[ i ].href === resolvedHref ){\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function() {\n\t\t\t\tonloadcssdefined( cb );\n\t\t\t});\n\t\t};\n\n\t\tfunction loadCB(){\n\t\t\tif( ss.addEventListener ){\n\t\t\t\tss.removeEventListener( \"load\", loadCB );\n\t\t\t}\n\t\t\tss.media = media || \"all\";\n\t\t}\n\n\t\t// once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\t\tif( ss.addEventListener ){\n\t\t\tss.addEventListener( \"load\", loadCB);\n\t\t}\n\t\tss.onloadcssdefined = onloadcssdefined;\n\t\tonloadcssdefined( loadCB );\n\t\treturn ss;\n\t};\n\t// commonjs\n\tif( typeof exports !== \"undefined\" ){\n\t\texports.loadCSS = loadCSS;\n\t}\n\telse {\n\t\tw.loadCSS = loadCSS;\n\t}\n}( typeof global !== \"undefined\" ? global : this ));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/fg-loadcss/src/loadCSS.js\n// module id = 2\n// module chunks = 0","/* eslint-disable */\n/*!\n * modernizr v3.5.0\n * Build https://modernizr.com/download?-flexbox-setclasses-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n  var tests = [];\n  \n\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.5.0',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  \n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  \n\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      if (isSVG) {\n        docElement.className.baseVal = className;\n      } else {\n        docElement.className = className;\n      }\n    }\n\n  }\n\n  ;\n\n  /**\n   * If the browsers follow the spec, then they would expose vendor-specific styles as:\n   *   elem.style.WebkitBorderRadius\n   * instead of something like the following (which is technically incorrect):\n   *   elem.style.webkitBorderRadius\n\n   * WebKit ghosts their properties in lowercase but Opera & Moz do not.\n   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\n\n   * More here: github.com/Modernizr/Modernizr/issues/issue/21\n   *\n   * @access private\n   * @returns {string} The string representing the vendor-specific style properties\n   */\n\n  var omPrefixes = 'Moz O ms Webkit';\n  \n\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n  \n\n\n  /**\n   * contains checks to see if a string contains another string\n   *\n   * @access private\n   * @function contains\n   * @param {string} str - The string we want to check for substrings\n   * @param {string} substr - The substring we want to search the first string for\n   * @returns {boolean}\n   */\n\n  function contains(str, substr) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   *\n   * @access private\n   */\n\n  var modElem = {\n    elem: createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n  \n\n  var mStyle = {\n    style: modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n  \n\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   */\n\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      // eslint-disable-next-line\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n\n  }\n\n  ;\n\n  /**\n   * domToCSS takes a camelCase string and converts it to kebab-case\n   * e.g. boxSizing -> box-sizing\n   *\n   * @access private\n   * @function domToCSS\n   * @param {string} name - String name of camelCase prop we want to convert\n   * @returns {string} The kebab-case version of the supplied name\n   */\n\n  function domToCSS(name) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n  ;\n\n\n  /**\n   * wrapper around getComputedStyle, to fix issues with Firefox returning null when\n   * called inside of a hidden iframe\n   *\n   * @access private\n   * @function computedStyle\n   * @param {HTMLElement|SVGElement} - The element we want to find the computed styles of\n   * @param {string|null} [pseudoSelector]- An optional pseudo element selector (e.g. :before), of null if none\n   * @returns {CSSStyleDeclaration}\n   */\n\n  function computedStyle(elem, pseudo, prop) {\n    var result;\n\n    if ('getComputedStyle' in window) {\n      result = getComputedStyle.call(window, elem, pseudo);\n      var console = window.console;\n\n      if (result !== null) {\n        if (prop) {\n          result = result.getPropertyValue(prop);\n        }\n      } else {\n        if (console) {\n          var method = console.error ? 'error' : 'log';\n          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\n        }\n      }\n    } else {\n      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\n    }\n\n    return result;\n  }\n\n  ;\n\n  /**\n   * nativeTestProps allows for us to use native feature detection functionality if available.\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @access private\n   * @function nativeTestProps\n   * @param {array} props - An array of property names\n   * @param {string} value - A string representing the value we want to check via @supports\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n   */\n\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps(props, value) {\n    var i = props.length;\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\n        return computedStyle(node, null, 'position') == 'absolute';\n      });\n    }\n    return undefined;\n  }\n  ;\n\n  /**\n   * cssToDOM takes a kebab-case string and converts it to camelCase\n   * e.g. box-sizing -> boxSizing\n   *\n   * @access private\n   * @function cssToDOM\n   * @param {string} name - String name of kebab-case prop we want to convert\n   * @returns {string} The camelCase version of the supplied name\n   */\n\n  function cssToDOM(name) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps(props, prefixed, value, skipValueTest) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if (!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use\n\n    // inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    // for strict XHTML browsers the hardly used samp element is used\n    var elems = ['modernizr', 'tspan', 'samp'];\n    while (!mStyle.style && elems.length) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for (i = 0; i < propsLength; i++) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if (mStyle.style[prop] !== undefined) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] != before) {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed == 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  /**\n   * List of JavaScript DOM values used for tests\n   *\n   * @memberof Modernizr\n   * @name Modernizr._domPrefixes\n   * @optionName Modernizr._domPrefixes\n   * @optionProp domPrefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n   * than kebab-case properties, all properties are their Capitalized variant\n   *\n   * ```js\n   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n   * ```\n   */\n\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n  ModernizrProto._domPrefixes = domPrefixes;\n  \n\n  /**\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\n   *\n   * @access private\n   * @function fnBind\n   * @param {function} fn - a function you want to change `this` reference to\n   * @param {object} that - the `this` you want to call the function with\n   * @returns {function} The wrapped version of the supplied function\n   */\n\n  function fnBind(fn, that) {\n    return function() {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  ;\n\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   *\n   * @access private\n   * @function testDOMProps\n   * @param {array.<string>} props - An array of properties to test for\n   * @param {object} obj - An object or Element you want to use to test the parameters again\n   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\n   * @returns {false|*} returns false if the prop is unsupported, otherwise the value that is supported\n   */\n  function testDOMProps(props, obj, elem) {\n    var item;\n\n    for (var i in props) {\n      if (props[i] in obj) {\n\n        // return the property name as a string\n        if (elem === false) {\n          return props[i];\n        }\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overriden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  ;\n\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   * We specify literally ALL possible (known and/or likely) properties on\n   * the element including the non-vendor prefixed one, for forward-\n   * compatibility.\n   *\n   * @access private\n   * @function testPropsAll\n   * @param {string} prop - A string of the property to test for\n   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\n   * @param {string} [value] - A string of a css value\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\n   * @returns {false|string} returns the string version of the property, or false if it is unsupported\n   */\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n      props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  // or any of its vendor-prefixed variants, is recognized\n  //\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n  \n\n  /**\n   * testAllProps determines whether a given CSS property is supported in the browser\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testAllProps\n   * @optionName Modernizr.testAllProps()\n   * @optionProp testAllProps\n   * @access public\n   * @function testAllProps\n   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\n   * @param {string} [value] - String of the value to test\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\n   * @example\n   *\n   * testAllProps determines whether a given CSS property, in some prefixed form,\n   * is supported by the browser.\n   *\n   * ```js\n   * testAllProps('boxSizing')  // true\n   * ```\n   *\n   * It can optionally be given a CSS value in string form to test if a property\n   * value is valid\n   *\n   * ```js\n   * testAllProps('display', 'block') // true\n   * testAllProps('display', 'penguin') // false\n   * ```\n   *\n   * A boolean can be passed as a third parameter to skip the value check when\n   * native detection (@supports) isn't available.\n   *\n   * ```js\n   * testAllProps('shapeOutside', 'content-box', true);\n   * ```\n   */\n\n  function testAllProps(prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n  ModernizrProto.testAllProps = testAllProps;\n  \n/*!\n{\n  \"name\": \"Flexbox\",\n  \"property\": \"flexbox\",\n  \"caniuse\": \"flexbox\",\n  \"tags\": [\"css\"],\n  \"notes\": [{\n    \"name\": \"The _new_ flexbox\",\n    \"href\": \"http://dev.w3.org/csswg/css3-flexbox\"\n  }],\n  \"warnings\": [\n    \"A `true` result for this detect does not imply that the `flex-wrap` property is supported; see the `flexwrap` detect.\"\n  ]\n}\n!*/\n/* DOC\nDetects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.\n*/\n\n  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));\n\n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./front-end/app/assets/js/lib/modernizr.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}